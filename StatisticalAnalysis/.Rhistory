file <- list.files(exp_path, pattern = "MotorLoop\\.xlsx$", full.names = TRUE)[1]
if (length(file) == 0) {
warning(paste("No MotorLoop.xlsx found for experiment", exp_num))
return(NULL)
}
# Dynamically read all sheets
exp_data <- map(sheets, ~ read_excel(file, sheet = .x) %>% mutate(iteration = time / 100))
names(exp_data) <- sheets
exp_data
}
# Function to safely load one experiment
load_motorlearning_data <- function(exp_num, sheets) {
exp_path <- file.path(base_path, exp_num)
file <- list.files(exp_path, pattern = "MotorLearning\\.xlsx$", full.names = TRUE)[1]
if (length(file) == 0) {
warning(paste("No MotorLearning.xlsx found for experiment", exp_num))
return(NULL)
}
# Dynamically read all sheets
exp_data <- map(sheets, ~ read_excel(file, sheet = .x) %>% mutate(iteration = time / 100))
names(exp_data) <- sheets
exp_data
}
# Load all experiments into a named list
motorlearning_data <- set_names(map(exp_numbers, ~ load_motorlearning_data(.x, sheet_names_motorlearning)), exp_numbers)
motorloop_data <- set_names(map(exp_numbers, ~ load_motorloop_data(.x, sheet_names_motorloop)), exp_numbers)
# --- Add goal to motorloop_data and copy to motorlearning_data ---
motorloop_data <- map(motorloop_data, function(exp) {
if (!is.null(exp$reward_over_time)) {
df <- exp$reward_over_time
goal_col <- names(df)[
sapply(df, function(x) any(x == 1)) & !(names(df) %in% c("time", "iteration"))
]
exp$goal <- goal_col
}
exp
})
# Copy detected goals into motorlearning_data (if available)
motorlearning_data <- map2(motorlearning_data, motorloop_data, function(learn_exp, loop_exp) {
if (!is.null(loop_exp$goal)) {
learn_exp$goal <- loop_exp$goal
}
learn_exp
})
extract_common_info <- function(df, exp_num, sheet_name, sheet_names, exp) {
# Extract metadata if present
meta <- exp[c("Object shape", "Object size (mm)", "Weight (g)", "Model type")]
df %>%
mutate(
experiment = exp_num,
sheet = sheet_name,
sheet_clean = sheet_name %>%
str_remove("_over_time$") %>%
str_replace_all("_", " ") %>%
str_to_title(),
sheet_clean = factor(
sheet_clean,
levels = sheet_names %>%
str_remove("_over_time$") %>%
str_replace_all("_", " ") %>%
str_to_title()
),
`Object shape` = meta$`Object shape`,
`Object size (mm)` = meta$`Object size (mm)`,
`Weight (g)` = meta$`Weight (g)`,
`Model type` = meta$`Model type`
)
}
extract_motorloop_data <- function(experiments, sheet_names) {
map_dfr(sheet_names, function(sheet_name) {
map_dfr(names(experiments), function(exp_num) {
exp <- experiments[[exp_num]]
df <- exp[[sheet_name]]
goal_col <- exp$goal
if (is.null(df) || length(goal_col) == 0 || !(goal_col %in% names(df))) return(NULL)
df %>%
select(iteration, !!sym(goal_col)) %>%
rename(value = !!sym(goal_col)) %>%
mutate(goal = goal_col) %>%
extract_common_info(exp_num, sheet_name, sheet_names, exp)
})
})
}
extract_motorlearning_data <- function(experiments, sheet_names) {
map_dfr(sheet_names, function(sheet_name) {
map_dfr(names(experiments), function(exp_num) {
exp <- experiments[[exp_num]]
df <- exp[[sheet_name]]
goal_col <- exp$goal
if (is.null(df)) return(NULL)
sensor_cols <- intersect(c("0", "1", "2", "3"), names(df))
if (length(sensor_cols) == 0) return(NULL)
df %>%
pivot_longer(
cols = all_of(sensor_cols),
names_to = "sensor",
values_to = "value"
) %>%
mutate(goal = goal_col) %>%
extract_common_info(exp_num, sheet_name, sheet_names, exp)
})
})
}
all_data_performance <- extract_motorloop_data(motorloop_data, sheet_names_motorloop)
all_data_sensor <- extract_motorlearning_data(motorlearning_data, sheet_names_motorlearning)
ggplot(all_data_performance, aes(x = iteration, y = value, group = experiment, color = experiment, linetype = `Model type`, size = `Weight (g)`)) +
geom_line(alpha = 0.6, size = 1) +
facet_grid(goal ~ sheet_clean, scales = "fixed") +  # rows = goals, columns = sheets
labs(
x = "Iteration",
y = "Value",
color = "Experiment"
) +
scale_x_continuous(
breaks = seq(0, max(all_data_performance$iteration), by = 20)  # show every 20 iterations
) +
scale_y_continuous(
breaks = scales::pretty_breaks(n = 3)   # 3 ticks on y-axis
)+
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text( hjust = 1),
legend.position = "right"
)
View(grasping_data)
View(motorloop_data)
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("ggplot2")
#remove.packages("rlang")
#install.packages("rlang")
#install.packages("ggstatsplot")
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggstatsplot)
library(patchwork)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
# Base folder path
base_path <- "../Data/Experiments/02_Grasping"
grasping_data <- read_excel(file.path(base_path, "/02_Grasping.xlsx"))
cylinder_numbers <- grasping_data %>%
filter(`Object shape` == "Cylinder", Number != 19) %>%
pull(Number)
exp_numbers <- sprintf("%03d", cylinder_numbers)
sheet_names_motorloop <- c("reward_over_time", "expected_reward_over_time", "dopamine_over_time", "activation_over_time")
sheet_names_motorlearning <- c("sensor_flex_over_time", "sensor_touch_grasp_over_time", "sensor_touch_hold_over_time")
# Function to safely load one experiment
load_motorloop_data <- function(exp_num, sheets) {
exp_path <- file.path(base_path, exp_num)
file <- list.files(exp_path, pattern = "MotorLoop\\.xlsx$", full.names = TRUE)[1]
if (length(file) == 0) {
warning(paste("No MotorLoop.xlsx found for experiment", exp_num))
return(NULL)
}
# Dynamically read all sheets
exp_data <- map(sheets, ~ read_excel(file, sheet = .x) %>% mutate(iteration = time / 100))
names(exp_data) <- sheets
exp_data
}
# Function to safely load one experiment
load_motorlearning_data <- function(exp_num, sheets) {
exp_path <- file.path(base_path, exp_num)
file <- list.files(exp_path, pattern = "MotorLearning\\.xlsx$", full.names = TRUE)[1]
if (length(file) == 0) {
warning(paste("No MotorLearning.xlsx found for experiment", exp_num))
return(NULL)
}
# Dynamically read all sheets
exp_data <- map(sheets, ~ read_excel(file, sheet = .x) %>% mutate(iteration = time / 100))
names(exp_data) <- sheets
exp_data
}
# Load all experiments into a named list
motorlearning_data <- set_names(map(exp_numbers, ~ load_motorlearning_data(.x, sheet_names_motorlearning)), exp_numbers)
motorloop_data <- set_names(map(exp_numbers, ~ load_motorloop_data(.x, sheet_names_motorloop)), exp_numbers)
# --- Add goal to motorloop_data and copy to motorlearning_data ---
motorloop_data <- map(motorloop_data, function(exp) {
if (!is.null(exp$reward_over_time)) {
df <- exp$reward_over_time
goal_col <- names(df)[
sapply(df, function(x) any(x == 1)) & !(names(df) %in% c("time", "iteration"))
]
exp$goal <- goal_col
}
exp
})
# Copy detected goals into motorlearning_data (if available)
motorlearning_data <- map2(motorlearning_data, motorloop_data, function(learn_exp, loop_exp) {
if (!is.null(loop_exp$goal)) {
learn_exp$goal <- loop_exp$goal
}
learn_exp
})
extract_common_info <- function(df, exp_num, sheet_name, sheet_names, grasping_data) {
# Get metadata from grasping_data
meta <- grasping_data %>%
filter(Number == as.numeric(exp_num)) %>%
select(`Object shape`, `Object size (mm)`, `Weight (g)`, `Model type`) %>%
slice(1)  # ensure a single row
df %>%
mutate(
experiment = exp_num,
sheet = sheet_name,
sheet_clean = sheet_name %>%
str_remove("_over_time$") %>%
str_replace_all("_", " ") %>%
str_to_title(),
sheet_clean = factor(
sheet_clean,
levels = sheet_names %>%
str_remove("_over_time$") %>%
str_replace_all("_", " ") %>%
str_to_title()
),
`Object shape` = meta$`Object shape`,
`Object size (mm)` = meta$`Object size (mm)`,
`Weight (g)` = meta$`Weight (g)`,
`Model type` = meta$`Model type`
)
}
extract_motorloop_data <- function(experiments, sheet_names, grasping_data) {
map_dfr(sheet_names, function(sheet_name) {
map_dfr(names(experiments), function(exp_num) {
exp <- experiments[[exp_num]]
df <- exp[[sheet_name]]
goal_col <- exp$goal
if (is.null(df) || length(goal_col) == 0 || !(goal_col %in% names(df))) return(NULL)
df %>%
select(iteration, !!sym(goal_col)) %>%
rename(value = !!sym(goal_col)) %>%
mutate(goal = goal_col) %>%
extract_common_info(exp_num, sheet_name, sheet_names, grasping_data)
})
})
}
extract_motorlearning_data <- function(experiments, sheet_names, grasping_data) {
map_dfr(sheet_names, function(sheet_name) {
map_dfr(names(experiments), function(exp_num) {
exp <- experiments[[exp_num]]
df <- exp[[sheet_name]]
goal_col <- exp$goal
if (is.null(df)) return(NULL)
sensor_cols <- intersect(c("0", "1", "2", "3"), names(df))
if (length(sensor_cols) == 0) return(NULL)
df %>%
pivot_longer(
cols = all_of(sensor_cols),
names_to = "sensor",
values_to = "value"
) %>%
mutate(goal = goal_col) %>%
extract_common_info(exp_num, sheet_name, sheet_names, grasping_data)
})
})
}
all_data_performance <- extract_motorloop_data(motorloop_data, sheet_names_motorloop, grasping_data)
all_data_sensor <- extract_motorlearning_data(motorlearning_data, sheet_names_motorlearning, grasping_data)
ggplot(all_data_performance, aes(x = iteration, y = value, group = experiment, color = experiment, linetype = `Model type`, size = `Weight (g)`)) +
geom_line(alpha = 0.6, size = 1) +
facet_grid(goal ~ sheet_clean, scales = "fixed") +  # rows = goals, columns = sheets
labs(
x = "Iteration",
y = "Value",
color = "Experiment"
) +
scale_x_continuous(
breaks = seq(0, max(all_data_performance$iteration), by = 20)  # show every 20 iterations
) +
scale_y_continuous(
breaks = scales::pretty_breaks(n = 3)   # 3 ticks on y-axis
)+
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text( hjust = 1),
legend.position = "right"
)
exp_numbers
# Function to compute percentage correct per sheet
compute_percentage_correct <- function(df, goal_col) {
df_filtered <- df %>%
filter(row_number() > 2)  # ignore first two rows
total <- nrow(df_filtered)
correct <- sum(df_filtered[[goal_col]] == 1, na.rm = TRUE)
100 * correct / total
}
# Build summary table
performance_summary <- map_dfr(names(motorloop_data), function(exp_num) {
exp <- motorloop_data[[exp_num]]
goal <- exp$goal
tibble(
experiment = exp_num,
goal = goal,
`Model type` = exp$`Model type`,
`Weight (g)` = exp$`Weight (g)`,
percent_activation = compute_percentage_correct(exp$activation_over_time, goal),
percent_reward = compute_percentage_correct(exp$reward_over_time, goal)
)
})
# Reshape to long format for plotting
performance_long <- performance_summary %>%
pivot_longer(cols = c(percent_reward, percent_activation),
names_to = "metric",
values_to = "percent") %>%
mutate(metric = recode(metric,
"percent_reward" = "Model Reward",
"percent_activation" = "Correct Activation"))
performance_mean <- performance_long %>%
group_by(goal, metric, `Model type`, `Weight (g)`) %>%
summarise(mean_percent = mean(percent), .groups = "drop")
# Function to compute percentage correct per sheet
compute_percentage_correct <- function(df, goal_col) {
df_filtered <- df %>%
filter(row_number() > 2)  # ignore first two rows
total <- nrow(df_filtered)
correct <- sum(df_filtered[[goal_col]] == 1, na.rm = TRUE)
100 * correct / total
}
# Build summary table
performance_summary <- map_dfr(names(motorloop_data), function(exp_num) {
exp <- motorloop_data[[exp_num]]
goal <- exp$goal
tibble(
experiment = exp_num,
goal = goal,
#`Model type` = exp$`Model type`,
#`Weight (g)` = exp$`Weight (g)`,
percent_activation = compute_percentage_correct(exp$activation_over_time, goal),
percent_reward = compute_percentage_correct(exp$reward_over_time, goal)
)
})
# Reshape to long format for plotting
performance_long <- performance_summary %>%
pivot_longer(cols = c(percent_reward, percent_activation),
names_to = "metric",
values_to = "percent") %>%
mutate(metric = recode(metric,
"percent_reward" = "Model Reward",
"percent_activation" = "Correct Activation"))
performance_mean <- performance_long %>%
group_by(goal, metric, `Model type`, `Weight (g)`) %>%
summarise(mean_percent = mean(percent), .groups = "drop")
# Function to compute percentage correct per sheet
compute_percentage_correct <- function(df, goal_col) {
df_filtered <- df %>%
filter(row_number() > 2)  # ignore first two rows
total <- nrow(df_filtered)
correct <- sum(df_filtered[[goal_col]] == 1, na.rm = TRUE)
100 * correct / total
}
# Build summary table
performance_summary <- map_dfr(names(motorloop_data), function(exp_num) {
exp <- motorloop_data[[exp_num]]
goal <- exp$goal
tibble(
experiment = exp_num,
goal = goal,
#`Model type` = exp$`Model type`,
#`Weight (g)` = exp$`Weight (g)`,
percent_activation = compute_percentage_correct(exp$activation_over_time, goal),
percent_reward = compute_percentage_correct(exp$reward_over_time, goal)
)
})
# Reshape to long format for plotting
performance_long <- performance_summary %>%
pivot_longer(cols = c(percent_reward, percent_activation),
names_to = "metric",
values_to = "percent") %>%
mutate(metric = recode(metric,
"percent_reward" = "Model Reward",
"percent_activation" = "Correct Activation"))
performance_mean <- performance_long %>%
group_by(goal, metric) %>% #, `Model type`, `Weight (g)`) %>%
summarise(mean_percent = mean(percent), .groups = "drop")
ggplot(performance_long, aes(x = goal, y = percent)) +
#geom_boxplot(width = 0.2, alpha = 0.6) +       # boxplot
geom_jitter(aes(
shape = `Model type`,
color = factor(`Weight (g)`)
),
width = 0.1, height = 0, size = 2, alpha = 0.8) +  # individual points
#geom_point(data = performance_mean, aes(x = goal, y = mean_percent),
#             color = "darkred", size = 3, shape = 16) +
#geom_label(data = performance_mean,
#             aes(x = goal, y = mean_percent, label = paste0("mean = ", round(mean_percent, 1))),
#             fill = "white", color = "black", label.r = unit(0.15, "lines"),
#             size = 3, label.padding = unit(0.05, "lines"), hjust = 0, nudge_x = 0.15) +
facet_wrap(~ metric, nrow = 1) +               # separate panels for activation vs reward
#facet_grid(`Model type` + `Weight (g)` ~ metric, scales = "fixed") +  # facet by model type + weight (rows) and metric (columns)
labs(x = "Goal",
y = "Percentage",
color = "Weight (g)",
shape = "Model Type") +
theme_minimal(base_size = 14) +
theme(legend.position = "right")
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`) %>%
summarise(
percent_activation = 100 * mean(get(goal)[sheet_clean == "Activation Over Time"] == 1, na.rm = TRUE),
percent_reward     = 100 * mean(get(goal)[sheet_clean == "Reward Over Time"] == 1, na.rm = TRUE),
.groups = "drop"
)
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`) %>%
summarise(
percent_activation = 100 * mean(get(goal)[sheet_clean == "Activation"] == 1, na.rm = TRUE),
percent_reward     = 100 * mean(get(goal)[sheet_clean == "Reward"] == 1, na.rm = TRUE),
.groups = "drop"
)
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`, sheet_clean) %>%
summarise(
percent = 100 * mean(value == 1, na.rm = TRUE),
.groups = "drop"
)
mutate(
metric = case_when(
sheet_clean == "Activation Over Time" ~ "Correct Activation",
sheet_clean == "Reward Over Time"     ~ "Model Reward",
TRUE ~ "Other"
)
) %>%
filter(metric != "Other")
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`, sheet_clean) %>%
summarise(
percent = 100 * mean(value == 1, na.rm = TRUE),
.groups = "drop"
)
mutate(
metric = case_when(
sheet_clean == "Activation" ~ "Correct Activation",
sheet_clean == "Reward"     ~ "Model Reward",
TRUE ~ "Other"
)
) %>%
filter(metric != "Other")
colnames(all_data_performance)
View(performance_summary)
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`, sheet_clean) %>%
summarise(
percent = 100 * mean(value == 1, na.rm = TRUE),
.groups = "drop"
)
performance_long <- performance_summary %>%
pivot_longer(
cols = c(percent_activation, percent_reward),
names_to = "metric",
values_to = "percent"
) %>%
mutate(
metric = recode(metric,
"percent_activation" = "Correct Activation",
"percent_reward" = "Model Reward")
)
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`, sheet_clean) %>%
summarise(
percent = 100 * mean(value == 1, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
metric = case_when(
sheet_clean == "Activation" ~ "Correct Activation",
sheet_clean == "Reward"     ~ "Model Reward",
TRUE ~ "Other"
)
) %>%
filter(metric != "Other")
performance_long <- performance_summary %>%
pivot_longer(
cols = c(percent_activation, percent_reward),
names_to = "metric",
values_to = "percent"
) %>%
mutate(
metric = recode(metric,
"percent_activation" = "Correct Activation",
"percent_reward" = "Model Reward")
)
performance_summary <- all_data_performance %>%
group_by(experiment, goal, `Model type`, `Weight (g)`, sheet_clean) %>%
summarise(
percent = 100 * mean(value == 1, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
metric = case_when(
sheet_clean == "Activation" ~ "Correct Activation",
sheet_clean == "Reward"     ~ "Model Reward",
TRUE ~ "Other"
)
) %>%
filter(metric != "Other")
ggplot(performance_summary, aes(x = goal, y = percent)) +
geom_jitter(aes(
shape = `Model type`,
color = factor(`Weight (g)`)
), width = 0.1, height = 0, size = 2, alpha = 0.8) +
facet_wrap(~ metric, nrow = 1) +
labs(
x = "Goal",
y = "Percentage",
color = "Weight (g)",
shape = "Model Type"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "right")
