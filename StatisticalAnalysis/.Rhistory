ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNamePlot = gsub(" \\(", "\n(", as.character(GroupName)),
GroupNameOrdered = factor(GroupName, levels = unique(GroupNamePlot[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameOrdered = factor(GroupName, levels = unique(GroupName[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameOrdered = factor(GroupName, levels = unique(GroupName[order(Group)])),
GroupNameOrdered = gsub(" \\(", "\n(", as.character(GroupNameOrdered))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" \\(", "\n(", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = False,
p.adjust.method = "bonferroni",
plot.type = "violin",
xlab = NULL,
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = False,
p.adjust.method = "bonferroni",
plot.type = "violin",
xlab = NULL,
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = FALSE,
plot.type = "violin",
xlab = NULL,
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
plot.type = "violin",
xlab = NULL,
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
messages = FALSE,
plot.type = "violin",
xlab = NULL,
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = TRUE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = TRUE,
results.subtitle = FALSE,
p.adjust.method = "bonferroni",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = TRUE,
results.subtitle = FALSE,
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
ggstatsplot.layer = FALSE # removes the ggstatsplot-added layers like subtitles
plot.type = "violin",
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
ggstatsplot.layer = FALSE, # removes the ggstatsplot-added layers like subtitles
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)+
labs(
x = "none"
)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
)+
labs(
x = NULL
)
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
) + labs(x = NULL)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
) + labs(x = NULL)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" \\(", "\n(", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
) + labs(x = NULL)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
) + labs(x = NULL)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" \\(", "\n(", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
) + labs(x = NULL)
# Load packages
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggstatsplot)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" \\(", "\n(", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
) + labs(x = NULL)
View(data_motor)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
) + labs(x = NULL)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = StopIteration,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Both Loops: Iterations required for learning"
) + labs(x = NULL)
# Load packages
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggstatsplot)
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" \\(", "\n(", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)]))
)
# --- Motor loop plot ---
data_motor <- data %>% filter(Loop == "Motor")
ggstatsplot::ggbetweenstats(
data = data_motor,
x = GroupNameOrdered,             # experiment type
y = Iterations,
type = "parametric",   # or "nonparametric"
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Motor Loop: Iterations required for learning"
) + labs(x = NULL)
# --- Premotor loop plot ---
data_premotor <- data %>% filter(Loop == "Premotor")
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Premotor Loop: Iterations required for learning"
) + labs(x = NULL)
ggstatsplot::ggbetweenstats(
data = data_premotor,
x = GroupNameOrdered,
y = StopIteration,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = "Both Loops: Iterations required for learning"
) + labs(x = NULL, y = "Iterations")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(purrr)
# Base path containing experiment folders
base_path <- "../Data/Experiments/01_BG_Training/01_SIM/"
# List all experiment subfolders (e.g., "001", "002", ...)
exp_folders <- list.dirs(base_path, full.names = TRUE, recursive = FALSE)
# Helper function to load both MotorLoop and PremotorLoop from one experiment
load_experiment <- function(folder) {
exp_id <- basename(folder)  # e.g., "001"
# Find files
motor_file <- list.files(folder, pattern = "MotorLoop\\.xlsx$", full.names = TRUE)[1]
premotor_file <- list.files(folder, pattern = "PremotorLoop\\.xlsx$", full.names = TRUE)[1]
# Load data if files exist
motor <- if (!is.na(motor_file)) {
read_excel(motor_file, sheet="expected_reward_over_time") %>%
pivot_longer(-time, names_to = "action", values_to = "reward") %>%
filter(action != "0000") %>%
mutate(loop = "Motor Loop", experiment = exp_id)
} else {
NULL
}
premotor <- if (!is.na(premotor_file)) {
read_excel(premotor_file, sheet="expected_reward_over_time") %>%
pivot_longer(-time, names_to = "action", values_to = "reward") %>%
filter(action != "000") %>%
mutate(loop = "Premotor Loop", experiment = exp_id)
} else {
NULL
}
bind_rows(motor, premotor)
}
# Apply function to all experiment folders
all_data <- map_dfr(exp_folders, load_experiment)
all_data <- all_data %>%
mutate(iteration = time / 100,
reward = reward * 100)
ggplot(all_data, aes(
x = iteration,
y = reward,
color = loop,
group = interaction(loop, action)
)) +
geom_line(size = 1) +
facet_wrap(~experiment) +
theme_minimal(base_size = 14) +
labs(
title = "Expected Reward over Iterations",
x = "Iteration",
y = "Expected Reward (%)",
color = NULL
)
