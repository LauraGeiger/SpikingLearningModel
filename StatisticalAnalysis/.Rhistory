y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop:", "Iterations\nReward =", reward)
) + labs(x = NULL, y = "Iterations")
plots[[paste(loop_type, reward)]] <- p
}
}
}
# Combine all plots into one big panel
wrap_plots(plots)
# --- Make Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
if (length(unique(df$GroupNameOrdered)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste("Motor Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations")
} else {
NULL
}
})
# --- Make Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
if (length(unique(df$GroupNameOrdered)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste("Premotor Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations")
} else {
NULL
}
})
# Remove NULLs (in case any combo was invalid)
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange in rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupNameOrdered)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupNameOrdered,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)   # ðŸ‘ˆ lock scale
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupNameOrdered = factor(GroupNameLabel, levels = unique(GroupNameLabel[order(Group)])),
GroupFlexion = factor(paste0(GroupNameOrdered, "\n(th=", `Flexion threshold`, ")"))
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = factor(paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")),
GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group)]))
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = ifelse(
is.na(`Flexion threshold`),
GroupNameLabel,
paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")
),
GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group, `Flexion threshold`)]))
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = ifelse(
is.na(`Flexion threshold`),
GroupNameLabel,
paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")
)#,
#GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group, `Flexion threshold`)]))
)
# --- define ordering by Group (numeric) first, then threshold ---
order_levels <- data %>%
arrange(Group, `Flexion threshold`) %>%
distinct(Group, GroupFlexion) %>%
pull(GroupFlexion)
data <- data %>%
mutate(
GroupNameOrdered = factor(GroupFlexion, levels = order_levels)
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = ifelse(
is.na(`Flexion threshold`),
GroupNameLabel,
paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")
)#,
#GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group, `Flexion threshold`)]))
)
# --- define ordering by Group (numeric) first, then threshold ---
order_levels <- data %>%
arrange(Group) %>%
distinct(Group, GroupFlexion) %>%
pull(GroupFlexion)
data <- data %>%
mutate(
GroupNameOrdered = factor(GroupFlexion, levels = order_levels)
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = ifelse(
is.na(`Flexion threshold`),
GroupNameLabel,
paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")
)#,
#GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group, `Flexion threshold`)]))
)
# --- Create factor levels by numeric Group only ---
group_order <- data %>%
arrange(Group) %>%
distinct(Group, GroupNameLabel) %>%
pull(GroupNameLabel)
# map GroupFlexion to factor, preserving thresholds in labels
data <- data %>%
mutate(
GroupNameOrdered = factor(GroupFlexion,
levels = unlist(lapply(group_order, function(g) {
# include all GroupFlexion labels that start with this group name
grep(paste0("^", g), GroupFlexion, value = TRUE)
})))
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
data <- read_excel("01_Exp_BG_Training_Iterations.xlsx")
data <- data %>%
mutate(
Iterations = as.numeric(Iterations),
StopIteration = as.numeric(StopIteration),
Loop = as.factor(Loop),
GroupNameLabel = gsub(" ", "\n", GroupName),
GroupFlexion = ifelse(
is.na(`Flexion threshold`),
GroupNameLabel,
paste0(GroupNameLabel, "\n(th = ", `Flexion threshold`, ")")
)#,
#GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group, `Flexion threshold`)]))
)
# create factor levels ordered by numeric Group
data <- data %>%
arrange(Group) %>%
mutate(
# preserve thresholds in labels, but order by Group number
GroupNameOrdered = factor(GroupFlexion, levels = unique(GroupFlexion[order(Group)]))
)
# Get list of reward criteria
reward_list <- unique(data$`Reward criteria`)
# --- Compute ranges ---
motor_range <- range(data %>% filter(Loop == "Motor") %>% pull(Iterations), na.rm = TRUE)
premotor_range <- range(data %>% filter(Loop == "Premotor") %>% pull(Iterations), na.rm = TRUE)
# --- Helper function ---
make_plot <- function(df, loop_type, reward, y_limits) {
if (length(unique(df$GroupFlexion)) >= 2) {
ggstatsplot::ggbetweenstats(
data = df,
x = GroupFlexion,
y = Iterations,
type = "parametric",
results.subtitle = FALSE,
pairwise.display = "none",
plot.type = "violin",
ggtheme = ggplot2::theme_minimal(),
title = paste(loop_type, "Loop\nReward =", reward)
) + labs(x = NULL, y = "Iterations") +
ylim(y_limits)
} else {
NULL
}
}
# --- Motor plots ---
plots_motor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Motor", `Reward criteria` == reward)
make_plot(df, "Motor", reward, motor_range)
})
# --- Premotor plots ---
plots_premotor <- lapply(reward_list, function(reward) {
df <- data %>% filter(Loop == "Premotor", `Reward criteria` == reward)
make_plot(df, "Premotor", reward, premotor_range)
})
# Remove NULLs
plots_motor <- Filter(Negate(is.null), plots_motor)
plots_premotor <- Filter(Negate(is.null), plots_premotor)
# --- Arrange rows ---
final_plot <- (wrap_plots(plots_motor, nrow = 1)) /
(wrap_plots(plots_premotor, nrow = 1))
final_plot
